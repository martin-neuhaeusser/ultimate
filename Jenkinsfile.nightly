def scmVars
def changeMessage
pipeline {
  agent { label 'linux' && 'java' }
  triggers {
    cron('@midnight')
  }
  options {
    skipDefaultCheckout()
    timeout(time: 10, unit: 'HOURS')
  }
  environment {
    PATH = "${env.WORKSPACE}/releaseScripts/default/adds:${env.PATH}"
  }
  stages {
    stage('Checkout') {
      steps {
        script {
          scmVars = checkout scm
        }
      }
    }
    stage('Check environment') {
      steps {
        sh(label: 'check solvers', script: 'releaseScripts/default/check_solvers.sh')
      }
    }
    stage('Build and run nightly tests') {
      // TODO     - ensure that test attachements are published s
      steps {
        withMaven(mavenOpts: '-Xmx4g -Xss4m -ea', options: [artifactsPublisher(disabled: true), junitPublisher(healthScaleFactor: 1.0, keepLongStdio: true)]) {
          //TODO: Use icfgtransformer as test
          sh 'cd trunk/source/BA_MavenParentUltimate && mvn -T 1C clean install -Pcoverage -Dtest=de.uni_freiburg.informatik.ultimate.lib.icfgtransformer.test'
        }
      }
    }
    // stage('Report'){
    //   steps {
    //     junit keepLongStdio: true, testResults: 'prototype/test_results.xml'
    //     cobertura coberturaReportFile: 'prototype/cov-cobertura.xml'
    //     catchError(buildResult: 'SUCCESS', catchInterruptions: false) {
    //       //do not let coverage result errors fail the build
    //       publishCoverage adapters: [coberturaAdapter('prototype/cov-cobertura.xml')], calculateDiffForChangeRequests: true, sourceFileResolver: sourceFiles('NEVER_STORE')
    //     }
    //   }
    // }
    stage('Run Sonar') {
      steps {
        echo "Executing sonar:sonar for ${SONAR_HOST_URL}"
        withCredentials([string(credentialsId: "${CRED_ID_SONAR}", variable: 'SONAR_TOKEN')]) {
          withMaven(mavenOpts: '-Xmx4g -Xss4m', publisherStrategy: 'EXPLICIT') {
            sh "cd trunk/source/BA_MavenParentUltimate && mvn sonar:sonar -Pcoverage -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_TOKEN}"
          }
        }
      }
    }
    stage('Deploy nightly build') {
      steps {
        sshagent (credentials: ['jenkins-deploy']) {
          sh (label: 'deploy nightly to struebli', script: 'releaseScripts/default/deploy_nightly_to_struebli.sh')
        }
      }
    }
  }
  post {
    always {
      script {
        env.mm_color = 'danger'
        if(currentBuild.currentResult == "SUCCESS") {
            env.mm_color = 'good'
        }
        def changeLogSets = currentBuild.changeSets
        changeMessage = ""
        for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int j = 0; j < entries.length; j++) {
                def entry = entries[j]
                changeMessage +="  * ${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}\n"
            }
        }
      }
      emailext(
        body: '$DEFAULT_CONTENT',
        mimeType: 'text/plain',
        recipientProviders: [culprits(), developers(), requestor()],
        replyTo: 'dietsch@informatik.uni-freiburg.de',
        subject: '$DEFAULT_SUBJECT'
      )
      mattermostSend(
        color: "${env.mm_color}",
        message: """Build ${currentBuild.id} of **${java.net.URLDecoder.decode env.JOB_NAME, 'UTF-8'}** finished with **${currentBuild.currentResult}**.
#### Links
* <${env.BUILD_URL}display/redirect|Open Jenkins log>
* <${env.RUN_CHANGES_DISPLAY_URL}|Open changes in Jenkins>
* <${scmVars.GIT_URL}|Open project in GitHub>
#### Changes
${changeMessage}
""",
        text: '',
        channel: '#botpool',
        icon: "https://jenkins.sopranium.de/static/0e41ff2a/images/jenkins-header-logo-v2.svg"
      )
    }
  }
}
